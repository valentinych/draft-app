#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è top4_players.json –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Google Sheets
"""

import csv
import json
import random
import requests
from typing import Dict, List, Any

def load_current_players() -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è playerId"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö playerId
        with open('data/cache/top4_players_original.json', 'r', encoding='utf-8') as f:
            current_players = json.load(f)
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –∏ –∫–ª—É–±—É
        player_lookup = {}
        for player in current_players:
            key = f"{player['fullName']}_{player['clubName']}"
            player_lookup[key] = player
        
        return player_lookup, current_players
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {e}")
        print("–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫...")
        return {}, []

def get_next_player_id(current_players: List[Dict]) -> int:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π playerId"""
    if not current_players:
        return 300000  # –ù–∞—á–∞–ª—å–Ω—ã–π ID –¥–ª—è –Ω–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    
    max_id = max(player.get('playerId', 0) for player in current_players)
    return max_id + 1

def normalize_position(position: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ–∑–∏—Ü–∏–∏"""
    pos_map = {
        '–ù–ø': 'FWD',
        '–ü–∑': 'MID', 
        '–ó—â': 'DEF',
        '–í—Ä': 'GK'
    }
    return pos_map.get(position, 'MID')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é MID

def normalize_league(league: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –ª–∏–≥"""
    league_map = {
        'Bundesliga': 'Bundesliga',
        'La Liga': 'La Liga', 
        'EPL': 'Premier League',
        'Serie A': 'Serie A'
    }
    return league_map.get(league, league)

def determine_league_by_club(club: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–≥—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–ª—É–±–∞"""
    club_lower = club.lower()
    
    # Bundesliga –∫–ª—É–±—ã
    bundesliga_clubs = [
        '–±–∞–≤–∞—Ä–∏—è', '–±–æ—Ä—É—Å—Å–∏—è –¥', '—Ä–± –ª–µ–π–ø—Ü–∏–≥', '–±–∞–π–µ—Ä', '–∞–π–Ω—Ç—Ä–∞—Ö—Ç —Ñ', '—Ö–æ—Ñ—Ñ–µ–Ω—Ö–∞–π–º', 
        '—Å–∞–Ω–∫—Ç-–ø–∞—É–ª–∏', '–≤–µ—Ä–¥–µ—Ä', '—Ñ—Ä–∞–π–±—É—Ä–≥', '–≤–æ–ª—å—Ñ—Å–±—É—Ä–≥', '—É–Ω–∏–æ–Ω –±–µ—Ä–ª–∏–Ω', 
        '–±–æ—Ä—É—Å—Å–∏—è –º', '–º–∞–π–Ω—Ü', '—à—Ç—É—Ç–≥–∞—Ä—Ç', '–∞—É–≥—Å–±—É—Ä–≥', '–∫–∏–ª—å–Ω', '–≥–µ–π–¥–µ–Ω—Ö–∞–π–º', '—Ö–æ–ª—à—Ç–∞–π–Ω –∫–∏–ª—å'
    ]
    
    # Serie A –∫–ª—É–±—ã  
    serie_a_clubs = [
        '—é–≤–µ–Ω—Ç—É—Å', '–º–∏–ª–∞–Ω', '–∏–Ω—Ç–µ—Ä', '–Ω–∞–ø–æ–ª–∏', '—Ä–æ–º–∞', '–ª–∞—Ü–∏–æ', '–∞—Ç–∞–ª–∞–Ω—Ç–∞', 
        '—Ñ–∏–æ—Ä–µ–Ω—Ç–∏–Ω–∞', '–±–æ–ª–æ–Ω—å—è', '—Ç–æ—Ä–∏–Ω–æ', '—É–¥–∏–Ω–µ–∑–µ', '—Å–∞—Å—Å—É–æ–ª–æ', '—ç–º–ø–æ–ª–∏',
        '–≤–µ—Ä–æ–Ω–∞', '—Å–ø–µ—Ü–∏—è', '—Å–∞–ª–µ—Ä–Ω–∏—Ç–∞–Ω–∞', '–¥–∂–µ–Ω–æ–∞', '–≤–µ–Ω–µ—Ü–∏—è', '–∫–∞–ª—å—è—Ä–∏', '–ª–µ—á—á–µ'
    ]
    
    # La Liga –∫–ª—É–±—ã
    la_liga_clubs = [
        '—Ä–µ–∞–ª –º–∞–¥—Ä–∏–¥', '–±–∞—Ä—Å–µ–ª–æ–Ω–∞', '–∞—Ç–ª–µ—Ç–∏–∫–æ', '—Å–µ–≤–∏–ª—å—è', '–≤–∞–ª–µ–Ω—Å–∏—è', '–≤–∏–ª—å—è—Ä—Ä–µ–∞–ª',
        '—Ä–µ–∞–ª —Å–æ—Å—å–µ–¥–∞–¥', '–±–µ—Ç–∏—Å', '–∞—Ç–ª–µ—Ç–∏–∫', '–æ—Å–∞—Å—É–Ω–∞', '—Å–µ–ª—å—Ç–∞', '—Ä–∞–π–æ –≤–∞–ª—å–µ–∫–∞–Ω–æ',
        '—Ö–µ—Ç–∞—Ñ–µ', '—ç—Å–ø–∞–Ω—å–æ–ª', '–º–∞–ª—å–æ—Ä–∫–∞', '–∫–∞–¥–∏—Å', '—ç–ª—å—á–µ', '–ª–µ–≤–∞–Ω—Ç–µ', '–∞–ª–∞–≤–µ—Å', '–≥—Ä–∞–Ω–∞–¥–∞'
    ]
    
    # Premier League –∫–ª—É–±—ã
    premier_league_clubs = [
        '–º–∞–Ω—á–µ—Å—Ç–µ—Ä —Å–∏—Ç–∏', '–ª–∏–≤erpool', '—á–µ–ª—Å–∏', '–∞—Ä—Å–µ–Ω–∞–ª', '–º–∞–Ω—á–µ—Å—Ç–µ—Ä —é–Ω–∞–π—Ç–µ–¥',
        '—Ç–æ—Ç—Ç–µ–Ω—Ö—ç–º', '–≤–µ—Å—Ç —Ö—ç–º', '–ª–µ—Å—Ç–µ—Ä', '—ç–≤–µ—Ä—Ç–æ–Ω', '–ª–∏–¥—Å', '–∞—Å—Ç–æ–Ω –≤–∏–ª–ª–∞',
        '–Ω—å—é–∫–∞—Å–ª', '–≤—É–ª–≤–µ—Ä—Ö—ç–º–ø—Ç–æ–Ω', '–∫—Ä–∏—Å—Ç–∞–ª –ø—ç–ª–∞—Å', '—Å–∞—É—Ç–≥–µ–º–ø—Ç–æ–Ω', '–±–µ—Ä–Ω–ª–∏',
        '—É–æ—Ç—Ñ–æ—Ä–¥', '–Ω–æ—Ä–≤–∏—á', '–±—Ä–∞–π—Ç–æ–Ω', '–±—Ä–µ–Ω—Ñ–æ—Ä–¥'
    ]
    
    for club_name in bundesliga_clubs:
        if club_name in club_lower:
            return 'Bundesliga'
            
    for club_name in serie_a_clubs:
        if club_name in club_lower:
            return 'Serie A'
            
    for club_name in la_liga_clubs:
        if club_name in club_lower:
            return 'La Liga'
            
    for club_name in premier_league_clubs:
        if club_name in club_lower:
            return 'Premier League'
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º Bundesliga (—Ç–∞–∫ –∫–∞–∫ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∫–ª—É–±–æ–≤ –æ—Ç—Ç—É–¥–∞)
    return 'Bundesliga'

def download_sheets_data() -> str:
    """–°–∫–∞—á–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets"""
    url = "https://docs.google.com/spreadsheets/d/e/2PACX-1vSIhYKZORtV12Qqaf-_KsY_KANI9Y2PHU56TDvELzh29s3ZMALcaM4G2BJMPBvtpae_Q29lH2PzGcK_/pub?gid=1433161548&single=true&output=csv"
    
    try:
        response = requests.get(url, timeout=30, allow_redirects=True)
        response.raise_for_status()
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
        try:
            return response.content.decode('utf-8')
        except UnicodeDecodeError:
            try:
                return response.content.decode('cp1251')
            except UnicodeDecodeError:
                return response.content.decode('latin-1')
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets: {e}")
        return ""

def update_players_from_sheets():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets...")
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    sheets_data = download_sheets_data()
    if not sheets_data:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
    player_lookup, current_players = load_current_players()
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(current_players)} —Ç–µ–∫—É—â–∏—Ö –∏–≥—Ä–æ–∫–æ–≤")
    
    # –ü–∞—Ä—Å–∏–º CSV –¥–∞–Ω–Ω—ã–µ
    lines = sheets_data.splitlines()
    print(f"üìù –ü–æ–ª—É—á–µ–Ω–æ {len(lines)} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö")
    
    csv_reader = csv.DictReader(lines)
    
    updated_players = []
    new_players_count = 0
    updated_players_count = 0
    next_player_id = get_next_player_id(current_players)
    
    print("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã...")
    
    row_count = 0
    for row in csv_reader:
        row_count += 1
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        if not row.get('–ò–º—è') or not row.get('–ö–ª—É–±'):
            continue
            
        name = row['–ò–º—è'].strip()
        club = row['–ö–ª—É–±'].strip()
        position = normalize_position(row.get('–ê', '').strip())
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏–≥—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞, –∏–Ω–∞—á–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –∫–ª—É–±—É
        league = row.get('League', '').strip()
        if not league:
            league = determine_league_by_club(club)
        else:
            league = normalize_league(league)
        
        if row_count % 500 == 0:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 500 —Å—Ç—Ä–æ–∫
            print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {row_count} —Å—Ç—Ä–æ–∫...")
        
        # –ü–∞—Ä—Å–∏–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        try:
            popularity = float(row.get('–ü-—Ç—å', '0').replace(',', '.'))
        except:
            popularity = 0.0
            
        try:
            fp_last = float(row.get('Pts', '0').replace(',', '.'))
        except:
            fp_last = 0.0
            
        # –ü–∞—Ä—Å–∏–º —Ü–µ–Ω—É –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ "$"
        try:
            price = float(row.get('$', '0').replace(',', '.'))
        except:
            price = round(5.0 + random.uniform(0, 10), 1)  # –°–ª—É—á–∞–π–Ω–∞—è —Ü–µ–Ω–∞ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
        
        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        lookup_key = f"{name}_{club}"
        existing_player = player_lookup.get(lookup_key)
        
        if existing_player:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞, —Å–æ—Ö—Ä–∞–Ω—è—è –≤—Å–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
            updated_player = existing_player.copy()
            updated_player.update({
                'popularity': popularity,
                'fp_last': fp_last,
                'position': position,
                'league': league,
                'price': price  # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
            })
            updated_players.append(updated_player)
            updated_players_count += 1
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            new_player = {
                'playerId': next_player_id,
                'fullName': name,
                'clubName': club,
                'position': position,
                'league': league,
                'price': price,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
                'popularity': popularity,
                'fp_last': fp_last
            }
            updated_players.append(new_player)
            new_players_count += 1
            next_player_id += 1
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    print("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")
    
    with open('data/cache/top4_players.json', 'w', encoding='utf-8') as f:
        json.dump(updated_players, f, ensure_ascii=False, indent=2)
    
    print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"üìä –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(updated_players)}")
    print(f"üÜï –ù–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {new_players_count}")
    print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∏–≥—Ä–æ–∫–æ–≤: {updated_players_count}")

if __name__ == "__main__":
    update_players_from_sheets()
